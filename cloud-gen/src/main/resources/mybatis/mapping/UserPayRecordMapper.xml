<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.bookstore.common.all.mapper.UserPayRecordMapper">
  <resultMap id="BaseResultMap" type="io.bookstore.common.all.entity.UserPayRecord">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="pay_channel" jdbcType="TINYINT" property="payChannel" />
    <result column="out_trade_no" jdbcType="BIGINT" property="outTradeNo" />
    <result column="total_amount" jdbcType="INTEGER" property="totalAmount" />
    <result column="wu_amount" jdbcType="INTEGER" property="wuAmount" />
    <result column="pay_time" jdbcType="TIMESTAMP" property="payTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, pay_channel, out_trade_no, total_amount, wu_amount, pay_time
  </sql>
  <select id="selectByExample" parameterType="io.bookstore.common.all.entity.UserPayRecordExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_pay_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_pay_record
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from user_pay_record
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="io.bookstore.common.all.entity.UserPayRecordExample">
    delete from user_pay_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="io.bookstore.common.all.entity.UserPayRecord">
    insert into user_pay_record (id, user_id, pay_channel, 
      out_trade_no, total_amount, wu_amount, 
      pay_time)
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{payChannel,jdbcType=TINYINT}, 
      #{outTradeNo,jdbcType=BIGINT}, #{totalAmount,jdbcType=INTEGER}, #{wuAmount,jdbcType=INTEGER}, 
      #{payTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="io.bookstore.common.all.entity.UserPayRecord">
    insert into user_pay_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="payChannel != null">
        pay_channel,
      </if>
      <if test="outTradeNo != null">
        out_trade_no,
      </if>
      <if test="totalAmount != null">
        total_amount,
      </if>
      <if test="wuAmount != null">
        wu_amount,
      </if>
      <if test="payTime != null">
        pay_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="payChannel != null">
        #{payChannel,jdbcType=TINYINT},
      </if>
      <if test="outTradeNo != null">
        #{outTradeNo,jdbcType=BIGINT},
      </if>
      <if test="totalAmount != null">
        #{totalAmount,jdbcType=INTEGER},
      </if>
      <if test="wuAmount != null">
        #{wuAmount,jdbcType=INTEGER},
      </if>
      <if test="payTime != null">
        #{payTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="io.bookstore.common.all.entity.UserPayRecordExample" resultType="java.lang.Long">
    select count(*) from user_pay_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user_pay_record
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.payChannel != null">
        pay_channel = #{record.payChannel,jdbcType=TINYINT},
      </if>
      <if test="record.outTradeNo != null">
        out_trade_no = #{record.outTradeNo,jdbcType=BIGINT},
      </if>
      <if test="record.totalAmount != null">
        total_amount = #{record.totalAmount,jdbcType=INTEGER},
      </if>
      <if test="record.wuAmount != null">
        wu_amount = #{record.wuAmount,jdbcType=INTEGER},
      </if>
      <if test="record.payTime != null">
        pay_time = #{record.payTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user_pay_record
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      pay_channel = #{record.payChannel,jdbcType=TINYINT},
      out_trade_no = #{record.outTradeNo,jdbcType=BIGINT},
      total_amount = #{record.totalAmount,jdbcType=INTEGER},
      wu_amount = #{record.wuAmount,jdbcType=INTEGER},
      pay_time = #{record.payTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="io.bookstore.common.all.entity.UserPayRecord">
    update user_pay_record
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="payChannel != null">
        pay_channel = #{payChannel,jdbcType=TINYINT},
      </if>
      <if test="outTradeNo != null">
        out_trade_no = #{outTradeNo,jdbcType=BIGINT},
      </if>
      <if test="totalAmount != null">
        total_amount = #{totalAmount,jdbcType=INTEGER},
      </if>
      <if test="wuAmount != null">
        wu_amount = #{wuAmount,jdbcType=INTEGER},
      </if>
      <if test="payTime != null">
        pay_time = #{payTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="io.bookstore.common.all.entity.UserPayRecord">
    update user_pay_record
    set user_id = #{userId,jdbcType=BIGINT},
      pay_channel = #{payChannel,jdbcType=TINYINT},
      out_trade_no = #{outTradeNo,jdbcType=BIGINT},
      total_amount = #{totalAmount,jdbcType=INTEGER},
      wu_amount = #{wuAmount,jdbcType=INTEGER},
      pay_time = #{payTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>